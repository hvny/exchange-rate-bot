"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const menu_keyboard_1 = __importDefault(require("../../../lib/keyboards/menu/menu.keyboard"));
const startCommand = (bot) => {
    bot.command('start', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        const { id, username, first_name, last_name, language_code } = (_a = ctx.from) !== null && _a !== void 0 ? _a : {};
        if (!id)
            return;
        const user = (_b = ctx.from) !== null && _b !== void 0 ? _b : '';
        try {
            yield ctx.reply(`–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ <b>–∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç</b> –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n` +
                `üìå –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n` +
                // \tüí± /rate ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç\n +
                `üí∞ /setcurrency ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: USD)\n` +
                `üìä /convert ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é\n` +
                `‚ÑπÔ∏è /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n`, { parse_mode: 'HTML', reply_markup: (0, menu_keyboard_1.default)() });
            yield ctx.reply(`${JSON.stringify(user)}`);
        }
        catch (error) {
            yield ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }));
};
exports.default = startCommand;
